// Simple replacement for the PDF generation function
export const generateScreenshotPDF = async (playerName: string, setDownloading: (loading: boolean) => void) => {
  setDownloading(true)
  try {
    // Import html2canvas and jsPDF
    const html2canvas = (await import('html2canvas')).default
    const jspdf = await import('jspdf')
    const jsPDF = jspdf.default

    // Create a clean container for PDF content
    const pdfContainer = document.createElement('div')
    pdfContainer.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 210mm;
      min-height: 297mm;
      background: #0a0a0a;
      color: #ffffff;
      font-family: system-ui, -apple-system, sans-serif;
      padding: 20px;
      box-sizing: border-box;
      z-index: 9999;
    `

    // Get the main content and create a simplified version
    const playerNameEl = document.querySelector('h1')
    const statsElements = document.querySelectorAll('[class*="stat"]')
    const gameElements = document.querySelectorAll('[class*="game"]')
    
    // Create simplified HTML content
    pdfContainer.innerHTML = `
      <div style="text-align: center; margin-bottom: 30px;">
        <h1 style="color: #3b82f6; font-size: 36px; margin: 0;">${playerName}</h1>
        <p style="color: #a3a3a3; font-size: 18px;">League of Legends Performance Report</p>
      </div>
      
      <div style="margin-bottom: 30px;">
        <h2 style="color: #ffffff; font-size: 24px; margin-bottom: 15px;">Performance Overview</h2>
        <div style="background: #1a1a1a; padding: 20px; border-radius: 8px; border: 1px solid #404040;">
          <p style="color: #a3a3a3; margin: 0;">Detailed performance analysis and insights generated from recent games.</p>
        </div>
      </div>
      
      <div style="text-align: center; margin-top: 50px; color: #666;">
        <p>Generated by Rift Rewind - ${new Date().toLocaleDateString()}</p>
      </div>
    `

    document.body.appendChild(pdfContainer)
    
    // Wait for render
    await new Promise(resolve => setTimeout(resolve, 500))

    // Capture the clean container
    const canvas = await html2canvas(pdfContainer, {
      width: 794, // A4 width in pixels at 96dpi
      height: 1123, // A4 height in pixels at 96dpi
      background: '#0a0a0a'
    } as any)

    // Remove the temporary container
    document.body.removeChild(pdfContainer)

    // Calculate PDF dimensions (A4 format)
    const imgWidth = 210 // A4 width in mm
    const pageHeight = 297 // A4 height in mm
    const imgHeight = (canvas.height * imgWidth) / canvas.width
    
    // Create PDF
    const pdf = new jsPDF('p', 'mm', 'a4')
    
    if (imgHeight <= pageHeight) {
      // Single page
      pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, 0, imgWidth, imgHeight)
    } else {
      // Multiple pages needed
      let heightLeft = imgHeight
      let position = 0
      
      // First page
      pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, position, imgWidth, imgHeight)
      heightLeft -= pageHeight
      
      // Additional pages
      while (heightLeft >= 0) {
        position = heightLeft - imgHeight
        pdf.addPage()
        pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, position, imgWidth, imgHeight)
        heightLeft -= pageHeight
      }
    }
    
    // Add discrete watermark
    const pageCount = (pdf as any).internal.getNumberOfPages()
    pdf.setPage(pageCount) 
    pdf.setFontSize(8)
    pdf.setTextColor(100, 100, 100)
    pdf.text('Generated by Rift Rewind', 105, 292, { align: 'center' })
    pdf.text(new Date().toLocaleDateString(), 105, 295, { align: 'center' })
    
    // Save the PDF
    const cleanPlayerName = playerName.replace(/[^a-zA-Z0-9]/g, '_')
    const fileName = `${cleanPlayerName}_RiftRewind_${new Date().toISOString().split('T')[0]}.pdf`
    pdf.save(fileName)
    
  } catch (err) {
    console.error('Failed to generate PDF:', err)
    alert('Failed to generate PDF. Please try again.')
    
    // Clean up container in case of error
    const container = document.querySelector('div[style*="z-index: 9999"]')
    if (container) {
      document.body.removeChild(container)
    }
  } finally {
    setDownloading(false)
  }
}